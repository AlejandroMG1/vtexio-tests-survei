// Generated by https://quicktype.io

export interface Order {
  orderId: string
  sequence: string
  marketplaceOrderId: string
  marketplaceServicesEndpoint: null
  sellerOrderId: string
  origin: string
  affiliateId: string
  salesChannel: string
  merchantName: string
  status: string
  statusDescription: string
  value: number
  creationDate: string
  lastChange: string
  orderGroup: string
  totals: Total[]
  items: OrderItem[]
  marketplaceItems: any[]
  clientProfileData: ClientProfileData
  giftRegistryData: null
  marketingData: null
  ratesAndBenefitsData: RatesAndBenefitsData
  shippingData: ShippingData
  paymentData: PaymentData
  packageAttachment: PackageAttachment
  sellers: Seller[]
  callCenterOperatorData: null
  followUpEmail: string
  lastMessage: null
  hostname: string
  invoiceData: InvoiceData
  changesAttachment: null
  openTextField: null
  roundingError: number
  orderFormId: string
  commercialConditionData: null
  isCompleted: boolean
  customData: null
  storePreferencesData: StorePreferencesData
  allowCancellation: boolean
  allowEdition: boolean
  isCheckedIn: boolean
  marketplace: null
  authorizedDate: string
  invoicedDate: string
  cancelReason: null
  itemMetadata: ItemMetadata
  subscriptionData: null
  taxData: null
  checkedInPickupPointId: null
  cancellationData: null
  clientPreferencesData: ClientPreferencesData
}

export interface ClientPreferencesData {
  locale: string
  optinNewsLetter: boolean
}

export interface ClientProfileData {
  id: string
  email: string
  firstName: string
  lastName: string
  documentType: string
  document: string
  phone: string
  corporateName: null
  tradeName: null
  corporateDocument: null
  stateInscription: string
  corporatePhone: null
  isCorporate: boolean
  userProfileId: string
  userProfileVersion: null
  customerClass: null
}

export interface InvoiceData {
  address: null
  userPaymentInfo: null
}

export interface AssemblyOption {
  Id: string
  Name: string
  Required: boolean
  InputValues: Content
  Composition: ItemMetadata
}

export interface Item {
  Id: string
  Seller: string
  Name: null | string
  SkuName: null | string
  ProductId: null | string
  RefId: null | string
  Ean: null | string
  ImageUrl: null | string
  DetailUrl: null | string
  AssemblyOptions: AssemblyOption[] | null
}

export interface ItemMetadata {
  Items: Item[]
}

export interface Content {}

export interface OrderItem {
  uniqueId: string
  id: string
  productId: string
  ean: string
  lockId: null
  itemAttachment: ItemAttachment
  attachments: any[]
  quantity: number
  seller: string
  name: string
  refId: string
  price: number
  listPrice: number
  manualPrice: null
  priceTags: PriceTag[]
  imageUrl: string
  detailUrl: string
  components: any[]
  bundleItems: any[]
  params: any[]
  offerings: any[]
  attachmentOfferings: any[]
  sellerSku: string
  priceValidUntil: string
  commission: number
  tax: number
  preSaleDate: null
  additionalInfo: AdditionalInfo
  measurementUnit: string
  unitMultiplier: number
  sellingPrice: number
  isGift: boolean
  shippingPrice: null
  rewardValue: number
  freightCommission: number
  priceDefinition: PriceDefinition
  taxCode: string
  parentItemIndex: null | string
  parentAssemblyBinding: null | string
  callCenterOperator: null
  serialNumbers: null
  assemblies: any[]
  costPrice: null
}

export interface AdditionalInfo {
  brandName: string
  brandId: string
  categoriesIds: string
  categories: Category[]
  productClusterId: string
  commercialConditionId: string
  dimension: Dimension
  offeringInfo: null
  offeringType: null
  offeringTypeId: null
}

export interface Category {
  id: number
  name: string
}

export interface Dimension {
  cubicweight: number
  height: number
  length: number
  weight: number
  width: number
}

export interface ItemAttachment {
  content: Content
  name: null
}

export interface PriceDefinition {
  sellingPrices: SellingPrice[]
  calculatedSellingPrice: number
  total: number
}

export interface SellingPrice {
  value: number
  quantity: number
}

export interface PriceTag {
  name: string
  value: number
  isPercentual: boolean
  identifier: null
  rawValue: number
  rate: null
  jurisCode: null
  jurisType: null
  jurisName: null
}

export interface PackageAttachment {
  packages: Package[]
}

export interface Package {
  items: PackageItem[]
  courier: null
  invoiceNumber: string
  invoiceValue: number
  invoiceUrl: null
  issuanceDate: string
  trackingNumber: null
  invoiceKey: null
  trackingUrl: null
  embeddedInvoice: string
  type: string
  courierStatus: null
  cfop: null
  restitutions: Content
  volumes: null
  EnableInferItems: null
}

export interface PackageItem {
  itemIndex: number
  quantity: number
  price: number
  description: null
  unitMultiplier: number
}

export interface PaymentData {
  giftCards: any[]
  transactions: Transaction[]
}

export interface Transaction {
  isActive: boolean
  transactionId: string
  merchantName: string
  payments: Payment[]
}

export interface Payment {
  id: string
  paymentSystem: string
  paymentSystemName: string
  value: number
  installments: number
  referenceValue: number
  cardHolder: null
  cardNumber: null
  firstDigits: null
  lastDigits: null
  cvv2: null
  expireMonth: null
  expireYear: null
  url: null
  giftCardId: null
  giftCardName: null
  giftCardCaption: null
  redemptionCode: null
  group: string
  tid: string
  dueDate: null
  connectorResponses: ConnectorResponses
  giftCardProvider: null
  giftCardAsDiscount: null
  koinUrl: null
  accountId: null
  parentAccountId: null
  bankIssuedInvoiceIdentificationNumber: null
  bankIssuedInvoiceIdentificationNumberFormatted: null
  bankIssuedInvoiceBarCodeNumber: null
  bankIssuedInvoiceBarCodeType: null
  billingAddress: null
}

export interface ConnectorResponses {
  Tid: string
  ReturnCode: null
  Message: null
  authId: string
  nsu: string
}

export interface RatesAndBenefitsData {
  id: string
  rateAndBenefitsIdentifiers: any[]
}

export interface Seller {
  id: string
  name: string
  logo: string
  fulfillmentEndpoint: string
}

export interface ShippingData {
  id: string
  address: Address
  logisticsInfo: LogisticsInfo[]
  trackingHints: null
  selectedAddresses: Address[]
}

export interface Address {
  addressType: string
  receiverName: null | string
  addressId: string
  versionId: null
  entityId: null
  postalCode: null | string
  city: string
  state: State
  country: string
  street: string
  number: null | string
  neighborhood: string
  complement: string
  reference: null
  geoCoordinates: number[]
}

export interface LogisticsInfo {
  itemIndex: number
  selectedSla: string
  lockTTL: string
  price: number
  listPrice: number
  sellingPrice: number
  deliveryWindow: null
  deliveryCompany: string
  shippingEstimate: string
  shippingEstimateDate: string
  slas: Sla[]
  shipsTo: string[]
  deliveryIds: DeliveryID[]
  deliveryChannels: DeliveryChannel[]
  deliveryChannel: string
  pickupStoreInfo: PickupStoreInfo
  addressId: string
  versionId: null
  entityId: null
  polygonName: string
  pickupPointId: null
  transitTime: string
}

export interface DeliveryChannel {
  id: string
  stockBalance: number
}

export interface DeliveryID {
  courierId: string
  courierName: string
  dockId: string
  quantity: number
  warehouseId: string
  accountCarrierName: null
  kitItemDetails: any[]
}

export interface PickupStoreInfo {
  additionalInfo: null | string
  address: Address | null
  dockId: null
  friendlyName: string | null
  isPickupStore: boolean
}

export interface Sla {
  id: string
  name: string
  shippingEstimate: string
  deliveryWindow: null
  price: number
  deliveryChannel: string
  pickupStoreInfo: PickupStoreInfo
  polygonName: string
  lockTTL: string
  pickupPointId: string
  transitTime: string
  pickupDistance: number | null
}

export interface StorePreferencesData {
  countryCode: string
  currencyCode: string
  currencyFormatInfo: CurrencyFormatInfo
  currencyLocale: number
  currencySymbol: string
  timeZone: string
}

export interface CurrencyFormatInfo {
  CurrencyDecimalDigits: number
  CurrencyDecimalSeparator: string
  CurrencyGroupSeparator: string
  CurrencyGroupSize: number
  StartsWithCurrencySymbol: boolean
}

export interface Total {
  id: string
  name: string
  value: number
}
